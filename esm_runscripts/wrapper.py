"""
Snakemake wrapper for esm_runscripts execution.

This wrapper extracts and executes the .run script content generated by
esm_runscripts without submitting to the batch system. Snakemake handles
resource allocation, and we execute the script content directly.

Resource Allocation
-------------------
Resources are assigned in the Snakefile rule using get_resources() from helper.py:

    from esm_runscripts.helper import get_resources

    rule compute:
        resources:
            **get_resources("config.yaml", "compute", expid="test")
        wrapper:
            "path/to/esm_runscripts"

Snakemake translates these resources to SLURM directives automatically when using
the SLURM executor plugin. The wrapper only executes the script content.
"""

__author__ = "Paul Gierz"
__copyright__ = "Copyright 2025, Paul Gierz"
__email__ = "paul.gierz@awi.de"
__license__ = "MIT"

import sys

from snakemake.shell import shell

# Import wrapper functions from helper module
from .helper import (
    find_run_script,
    extract_executable_content,
    write_executable_script,
)

# Extract parameters from Snakemake context
runscript = snakemake.params["runscript"]
task = snakemake.params["task"]
expid = snakemake.params.get("expid", "test")
reuse_config = snakemake.params.get("reuse_config", False)
modify_config = snakemake.params.get("modify_config", None)
current_date = snakemake.params.get("current_date", None)
extra = snakemake.params.get("extra", "")

log = snakemake.log_fmt_shell(stdout=True, stderr=True)


# Main execution logic

print(
    f"[esm_runscripts wrapper] Starting for expid={expid}, task={task}", file=sys.stderr
)

# Step 1: Generate config/script if needed or if reuse_config=False
if not reuse_config:
    print(
        f"[esm_runscripts wrapper] Generating configuration with --check",
        file=sys.stderr,
    )

    cmd = f"esm_runscripts --check {runscript} -t {task} -e {expid}"

    if modify_config:
        cmd += f" -m {modify_config}"

    if current_date:
        cmd += f" -s {current_date}"

    if extra:
        cmd += f" {extra}"

    # Run esm_runscripts in check mode
    shell(f"{cmd} {log}")

    print(f"[esm_runscripts wrapper] Configuration generated", file=sys.stderr)
else:
    print(f"[esm_runscripts wrapper] Reusing existing configuration", file=sys.stderr)

# Step 2: Find the generated .run script
print(f"[esm_runscripts wrapper] Looking for .run script", file=sys.stderr)

try:
    run_script = find_run_script(expid, task)
    print(f"[esm_runscripts wrapper] Found: {run_script}", file=sys.stderr)
except FileNotFoundError as e:
    print(f"[esm_runscripts wrapper] ERROR: {e}", file=sys.stderr)
    sys.exit(1)

# Step 3: Parse and extract executable content
print(f"[esm_runscripts wrapper] Extracting executable content", file=sys.stderr)

try:
    script_content = extract_executable_content(run_script)
except Exception as e:
    print(
        f"[esm_runscripts wrapper] ERROR: Failed to extract content: {e}",
        file=sys.stderr,
    )
    sys.exit(1)

# Step 4: Write to temporary executable script
temp_script = run_script.parent / f"{run_script.stem}_snakemake.sh"
write_executable_script(script_content, temp_script)

print(f"[esm_runscripts wrapper] Created executable: {temp_script}", file=sys.stderr)

# Step 5: Execute in Snakemake's allocated environment
# The script content includes:
# - module loads
# - export statements
# - working directory changes
# - actual model execution commands
print(f"[esm_runscripts wrapper] Executing script", file=sys.stderr)

try:
    shell(f"bash {temp_script} {log}")
    print(f"[esm_runscripts wrapper] Execution completed successfully", file=sys.stderr)
except Exception as e:
    print(f"[esm_runscripts wrapper] ERROR: Execution failed: {e}", file=sys.stderr)
    sys.exit(1)
finally:
    # Clean up temporary script
    if temp_script.exists():
        temp_script.unlink()
